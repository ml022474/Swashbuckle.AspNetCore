Listing Response Types
======================

By default, Swashbuckle will generate a "200" response for every operation. Additionally, if an action returns a response DTO (as a specific type or ``ActionResult<T>``), then a corresponding schema will be included with the "200" response definition. If you need to specify different status codes and/or additional responses, or you have actions that return ``IActionResult``, you can annotate individual actions with explicit response attributes or you can apply application-wide *API Conventions*.

Explicit Responses
------------------

To specify explicit responses, you can decorate actions (or controllers) with the ``[ProducesResponseType]`` and ``[ProducesDefaultResponseType]`` attributes that come with ASP.NET Core. For example, given the following action method:

    .. literalinclude:: ..\..\..\test\WebSites\ListingResponseTypes\Controllers\UsersController.cs
        :language: csharp
        :start-at: [HttpGet]
        :end-at: public
        :dedent: 8

Swashbuckle will generate the following responses:

    .. literalinclude:: ..\..\..\test\WebSites\ListingResponseTypes\swagger.yaml
        :language: yaml
        :start-after: operationId: GetUsers
        :end-before: x-end: GetUsers
        :dedent: 6

.. note:: With this approach, you have to include an attribute for *all* respones, including the "2xx" response. In other words, you can use the default responses generated by Swashbuckle or you can provide explicit responses, but you can't use a mixture of both.

API Conventions
---------------

`Web API conventions <https://docs.microsoft.com/en-us/aspnet/core/web-api/advanced/conventions?view=aspnetcore-5.0>`_, available in ASP.NET Core 2.2 and later, include a way to extract common documentation conventions and apply them to multiple actions, controllers, or all controllers within an assembly. They function as a substitute for decorating individual actions with explicit responses, as shown above. For example, if all actions with the word "Create" in their name ought to return a HTTP status of ``201 Created`` or ``400 Bad Request``, you could codify that convention in a C# class and apply it for documentation purposes. In fact, this exact convention is captured in the ``DefaultApiConventions`` class provided with ASP.NET Core.

To apply the default conventions (or your own custom type), you can decorate controllers with the ``[ApiConventionType]`` attribute:

    .. literalinclude:: ..\..\..\test\WebSites\ListingResponseTypes\Controllers\ProductsController.cs
        :language: csharp
        :start-at: [ApiController]
        :dedent: 4

In this case, Swashbuckle will generate the following responses:

    .. literalinclude:: ..\..\..\test\WebSites\ListingResponseTypes\swagger.yaml
        :language: yaml
        :start-at: responses:
        :end-before: x-end: CreateProduct
        :dedent: 6